#lang racket
(require racket/trace)
(require se3-bib/setkarten-module)

#|
Jakob Ambsdorf 6919840
Julius Schenke 6923104
Jonas Dreiskämper 6930232
Übungsleiter: Seppke Übungszeit: Mittwoch 10-12
|#


;;1. Funktionen höherer Ordnung
; Funktionen höherer Ordnung (high order functions) sind Funktionen,
; die Funktionen als Argumente erhalten oder als Wert zurückgeben.

#|
2.
a) Da bei (a) keine Funktion übergeben oder zuückgegeben wird, handelt
es sich nicht um eine Funktion höherer Ordnung

b) Da "map" eine Funktion auf eine Liste anwendet handelt es sich um
eine Funktion höherer Ordnung (erhält Fkt + gibt Fkt zuück)

c) Funktion höherer Ordnung, da Funktion map verwendet (und somit Funktion zurück gibt)

d)keine Funktion höherer Ordnung, da keinen Funktion übergeben/zurüchgegeben wird

e)Funktion höherer Ordnung, da


3. closures
- list mit zwei Argumenten ?
-

4.
(foldl ( curry + 2) 3 '( 3 4 5 ))
evaluiert zu 21, da

3+(3+2)+(4+2)+(5+2) = 21  ??

(map gerade-oder-ungerade '( 4 587 74 69 969 97 459 4))
-->  '(ungerade gerade ungerade gerade gerade gerade gerade ungerade), da auf jedes Element
der Liste die Funktion "gerade-oder-ungerade" angewendet wird

(filter number? '(( a b) () 1 (()) 4 -7 "a"))
-->  '(1 4 -7),da filter jedes Element der List mit "Integer?" prüft und eine List mit den Elementen
 erstellt, bei denen true zurückgegeben wirdElemente 

((compose ( curry foldl + 0) ( curry filter (curryr < 0)))
'(5682 48 24915 -45 -6 48) )
-->  -51, da

|#

;2.1.
 (define (liste-quad xs)
              (map sqr xs))

;2.2.
;devide 9/11 rest 0
(define ())

;2.3.
;sum (ungerade>6)
(define ())

;2.4.
;odd?--> 2x list
(define ())



;;3. Kartenspiel
;( define ( show-set-card n the-pattern the-mode the-color )
; n: 1 , 2 , or 3
; the-pattern:   'waves,    'oval ,  'rectangle
; the-mode:      'outline,  'solid,  'hatched
; the-color :    'red ,     'green,  'blue

(define (is-a-set? xs)
               )

;--------------------------------------- test/Hilfsfunktionen
( define ( schw-mitte f arg1 )
(lambda ( arg2 arg3 ) ( f arg2 arg1 arg3 ) ) )


( define ( gerade-oder-ungerade x )
( if ( integer? x )
( if ( odd? x )
'gerade
'ungerade )
'keinIteger))



 ((compose ( curry foldl + 0 ) ( curry filter ( curryr < 0 ) ) )
'(5682 48 24915 -45 -6 48) )
